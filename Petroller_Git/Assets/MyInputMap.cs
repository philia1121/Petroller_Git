//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MyInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputMap"",
    ""maps"": [
        {
            ""name"": ""VRBasic"",
            ""id"": ""4ed58093-8658-4b9b-8fca-7d3a211d23df"",
            ""actions"": [
                {
                    ""name"": ""LH_TrackState"",
                    ""type"": ""Button"",
                    ""id"": ""e6311c30-79f9-4544-80af-c77bdd078052"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RH_TrackState"",
                    ""type"": ""Button"",
                    ""id"": ""8cc8b35d-d637-4fea-89f6-d77be95b4788"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""197a51ec-c41c-45bb-ab5b-6c33529b2e42"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LH_TrackState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e192708c-0ef9-4b39-b57a-71651955175a"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RH_TrackState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VRBasic
        m_VRBasic = asset.FindActionMap("VRBasic", throwIfNotFound: true);
        m_VRBasic_LH_TrackState = m_VRBasic.FindAction("LH_TrackState", throwIfNotFound: true);
        m_VRBasic_RH_TrackState = m_VRBasic.FindAction("RH_TrackState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRBasic
    private readonly InputActionMap m_VRBasic;
    private List<IVRBasicActions> m_VRBasicActionsCallbackInterfaces = new List<IVRBasicActions>();
    private readonly InputAction m_VRBasic_LH_TrackState;
    private readonly InputAction m_VRBasic_RH_TrackState;
    public struct VRBasicActions
    {
        private @MyInputMap m_Wrapper;
        public VRBasicActions(@MyInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LH_TrackState => m_Wrapper.m_VRBasic_LH_TrackState;
        public InputAction @RH_TrackState => m_Wrapper.m_VRBasic_RH_TrackState;
        public InputActionMap Get() { return m_Wrapper.m_VRBasic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRBasicActions set) { return set.Get(); }
        public void AddCallbacks(IVRBasicActions instance)
        {
            if (instance == null || m_Wrapper.m_VRBasicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRBasicActionsCallbackInterfaces.Add(instance);
            @LH_TrackState.started += instance.OnLH_TrackState;
            @LH_TrackState.performed += instance.OnLH_TrackState;
            @LH_TrackState.canceled += instance.OnLH_TrackState;
            @RH_TrackState.started += instance.OnRH_TrackState;
            @RH_TrackState.performed += instance.OnRH_TrackState;
            @RH_TrackState.canceled += instance.OnRH_TrackState;
        }

        private void UnregisterCallbacks(IVRBasicActions instance)
        {
            @LH_TrackState.started -= instance.OnLH_TrackState;
            @LH_TrackState.performed -= instance.OnLH_TrackState;
            @LH_TrackState.canceled -= instance.OnLH_TrackState;
            @RH_TrackState.started -= instance.OnRH_TrackState;
            @RH_TrackState.performed -= instance.OnRH_TrackState;
            @RH_TrackState.canceled -= instance.OnRH_TrackState;
        }

        public void RemoveCallbacks(IVRBasicActions instance)
        {
            if (m_Wrapper.m_VRBasicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRBasicActions instance)
        {
            foreach (var item in m_Wrapper.m_VRBasicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRBasicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRBasicActions @VRBasic => new VRBasicActions(this);
    public interface IVRBasicActions
    {
        void OnLH_TrackState(InputAction.CallbackContext context);
        void OnRH_TrackState(InputAction.CallbackContext context);
    }
}
